#
# This Runner .......
# 
#   - # Extract the server IP from terraform variables.tf 
#   - Set up SSH with the private key or password to server
#   - # Copy the script "infra/scripts/deploy-on-dts.sh" to server
#   - Run the script "infra/scripts/deploy-on-dts.sh" on server
# 

name: Server-BasicSetup # manuel trigger

on:
  push:
    branches: [dev-branch]
    paths:  # Only triggers on changes
      - .github/workflows/Server-BasicSetup.yml

jobs:

  Job-1-Reset-and-install-BasicSetup:

    runs-on: ubuntu-latest
    
    steps:


    - name: Checkout code from the repository
      uses: actions/checkout@v3


    - name: Install sshpass on Runner
      run: |
        sudo apt-get update
        sudo apt-get install -y sshpass


    # Reset (delete namespace) and install K3s
    - name: Deploy K3s on server
      run: |
        echo "Deploying on server"
        sshpass -p "${{ secrets.SSH_ALEX_SERVER_PW }}" ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_ALEX_SERVER_IP }} bash << 'EOF'
          echo "Logged in successfully!"
          # PreTasks
          kubectl delete namespace dev --ignore-not-found
          sudo apt-get update -y
          sudo apt-get upgrade -y
          # Install K3s
          sudo apt-get install -y curl
          curl -sfL https://get.k3s.io | sh -
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $USER:$USER ~/.kube/config
          sudo chmod 644 ~/.kube/config
          sudo chmod 644 /etc/rancher/k3s/k3s.yaml
          # Create namespace
          kubectl create namespace dev
        EOF
        echo "K3s installed"
  

    # Create Secret for AlertManager Slack API URL as YAML ("kubectl create secret" does base64 encoding)
    - name: Create Secret Alertmanager
      env:
        SLACK_API_URL: ${{ secrets.ALERTMANAGER_URL_SLACK }}
      run: |
        sshpass -p "${{ secrets.SSH_ALEX_SERVER_PW }}" ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_ALEX_SERVER_IP }} bash << 'EOF'
          # create secret.yml
          cat <<EOF > slack-api-url-secret.yml
          apiVersion: v1
          kind: Secret
          metadata:
            name: slack-api-url
            namespace: dev
          stringData:
            SLACK_API_URL: ${SLACK_API_URL}
          EOF
          # apply secret.yml
          kubectl apply -f slack-api-url-secret.yml
          # delete secret.yml
          #rm -f slack-api-url-secret.yml
        EOF
      

    # Create Secret for Ingress SSL
    - name: Create TLS Secret 
      env:
        K8S_TLS_KEY: ${{ secrets.SSL_INGRESS_SIMPLYSTU_KEY }}
        K8S_TLS_CERT: ${{ secrets.SSL_INGRESS_SIMPLYSTU_CERT }}
        SSH_PASSWORD: ${{ secrets.SSH_ALEX_SERVER_PW }}
        SSH_HOST: ${{ secrets.SSH_ALEX_SERVER_IP }}
      run: |
        # Use sshpass to login and run code
        sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no \
          ubuntu@$SSH_HOST << EOF
            # create files
            echo "$K8S_TLS_KEY" > tls.key
            echo "$K8S_TLS_CERT" > tls.crt
            # create secret
            kubectl create secret tls petclinic-tls \
              --cert=tls.crt \
              --key=tls.key \
              --namespace=dev
            # delete files
            rm tls.key tls.crt
        EOF

    # Reset working directoy
    - name: Reset working directoy
      run: |
        sshpass -p "${{ secrets.SSH_ALEX_SERVER_PW }}" ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_ALEX_SERVER_IP }} bash << 'EOF'
          # delete working-directory
          rm -r /home/ubuntu/petclinic-jul24-deploy
          # create working-directory
          mkdir -p /home/ubuntu/petclinic-jul24-deploy
        EOF

# Server from scratch installation needed:
# - docker
# - stress
# - 
